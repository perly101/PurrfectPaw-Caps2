import AsyncStorage from '@react-native-async-storage/async-storage';
import { Platform } from 'react-native';
import { API } from './api';
import * as Google from 'expo-auth-session/providers/google';
import * as WebBrowser from 'expo-web-browser';

// Register WebBrowser for handling redirects
WebBrowser.maybeCompleteAuthSession();

// Configure Google OAuth client IDs for each platform
const GOOGLE_CLIENT_ID = Platform.select({
  ios: '1057133190581-oats45nfs1uet4l8kjbffrouedck8aar.apps.googleusercontent.com',
  android: '1057133190581-vqlnits2r3fnmm3p6lba2kioifnug7eh.apps.googleusercontent.com',
  web: '1057133190581-oats45nfs1uet4l8kjbffrouedck8aar.apps.googleusercontent.com',
}) || '';

// Define the Google auth scopes
const GOOGLE_SCOPES = ['profile', 'email'];

export class GoogleAuthService {
  static #request;
  static #response;
  static #promptAsync;

  // Initialize Google Auth
  static initGoogleAuth() {
    const [request, response, promptAsync] = Google.useAuthRequest({
      expoClientId: GOOGLE_CLIENT_ID,
      iosClientId: Platform.OS === 'ios' ? GOOGLE_CLIENT_ID : undefined,
      androidClientId: Platform.OS === 'android' ? GOOGLE_CLIENT_ID : undefined,
      webClientId: Platform.OS === 'web' ? GOOGLE_CLIENT_ID : undefined,
      scopes: GOOGLE_SCOPES,
    });

    this.#request = request;
    this.#response = response;
    this.#promptAsync = promptAsync;

    return { request, response, promptAsync };
  }

  // Regular email/password login
  static async loginWithEmail(email, password) {
    try {
      const response = await API.post('login', {
        email,
        password,
      });

      if (response.data && response.data.token) {
        await this.storeToken(response.data.token);
        return {
          success: true,
          user: response.data.user,
          isEmailVerified: response.data.user?.email_verified_at !== null,
        };
      } else {
        throw new Error(response.data?.message || 'Login failed');
      }
    } catch (error) {
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Login failed',
      };
    }
  }

  // Store authentication token
  static async storeToken(token) {
    await AsyncStorage.setItem('token', token);
    API.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    return token;
  }

  // Handle Google authentication for sign up
  static async handleGoogleSignUp(response) {
    // Extract user information from Google response
    const userInfo = await this.getUserInfoFromGoogle(response);
    
    // Return user info for registration
    return {
      success: true,
      userData: {
        first_name: userInfo.given_name || '',
        last_name: userInfo.family_name || '',
        email: userInfo.email || '',
        google_id: userInfo.id,
        avatar: userInfo.picture
      }
    };
  }

  // General method to handle Google authentication response
  static async handleGoogleResponse(response) {
    if (response?.type === 'success') {
      try {
        // Get the access token from the response
        const { access_token } = response.params;
        
        // Get user info from Google
        const userInfo = await this.getUserInfoFromGoogle(response);

        // Try to authenticate with backend using Google credentials
        const authResponse = await API.post('login/google', {
          google_id: userInfo.id,
          email: userInfo.email,
          first_name: userInfo.given_name,
          last_name: userInfo.family_name,
          avatar: userInfo.picture,
        });
        
        if (authResponse.data && authResponse.data.token) {
          await this.storeToken(authResponse.data.token);
          
          return {
            success: true,
            user: authResponse.data.user,
            isEmailVerified: authResponse.data.user?.email_verified_at !== null,
          };
        } else {
          throw new Error(authResponse.data?.message || 'Google auth failed');
        }
      } catch (error) {
        console.error('Error in handleGoogleResponse:', error);
        return {
          success: false,
          error: error.response?.data?.message || error.message || 'Google authentication failed',
        };
      }
    } else {
      return {
        success: false,
        error: 'Google authentication was cancelled or failed',
      };
    }
  }

  // Get user information from Google
  static async getUserInfoFromGoogle(response) {
    try {
      const { access_token } = response.params;
      const userInfoResponse = await fetch('https://www.googleapis.com/userinfo/v2/me', {
        headers: { Authorization: `Bearer ${access_token}` },
      });
      
      if (!userInfoResponse.ok) {
        throw new Error('Failed to fetch user info from Google');
      }
      
      const userInfo = await userInfoResponse.json();
      return userInfo;
    } catch (error) {
      console.error('Error fetching user info from Google:', error);
      throw error;
    }
  }

  // Register with Google data
  static async registerWithGoogle(userData) {
    try {
      const response = await API.post('register-google', userData);
      
      if (response.data && response.data.token) {
        await this.storeToken(response.data.token);
        return {
          success: true,
          user: response.data.user,
          isEmailVerified: response.data.user?.email_verified_at !== null,
          otp_sent: response.data.otp_sent || false,
        };
      } else {
        throw new Error(response.data?.message || 'Registration failed');
      }
    } catch (error) {
      return {
        success: false,
        error: error.response?.data?.message || error.message || 'Registration failed',
      };
    }
  }
}